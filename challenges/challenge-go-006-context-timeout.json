{
  "id": "go-context-timeout",
  "metadata": {
    "title": "Context-Based Timeout Handler",
    "description": "Implement context-based timeout handling for long-running operations.\n\n## Learning Objectives\n- Go context package usage\n- Timeout and cancellation handling\n- Graceful operation termination\n- Context propagation patterns",
    "difficulty": "medium",
    "points": 2,
    "timeLimit": 20,
    "tags": ["go", "context", "timeout", "cancellation", "concurrency"],
    "author": "Z-Challenge Team",
    "createdAt": "2025-10-05T10:25:00Z",
    "version": "1.0",
    "supportedLanguages": ["go"]
  },
  "problem": {
    "statement": "Create a function that simulates a long-running task with context timeout. The task should return 'completed' if it finishes within the timeout, or 'timeout' if it exceeds the time limit.",
    "inputFormat": "Two integers: task duration (seconds) and timeout (seconds)",
    "outputFormat": "'completed' or 'timeout'",
    "constraints": "- Use context.WithTimeout\n- Simulate work with time.Sleep\n- Handle context cancellation properly",
    "examples": [
      {
        "input": "2 5",
        "output": "completed",
        "explanation": "Task takes 2 seconds, timeout is 5 seconds, so it completes"
      },
      {
        "input": "10 3",
        "output": "timeout",
        "explanation": "Task takes 10 seconds, timeout is 3 seconds, so it times out"
      }
    ]
  },
  "languages": {
    "go": {
      "starterCode": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc runTaskWithTimeout(taskDuration, timeoutDuration int) string {\n\t// Your implementation here\n\t// Use context.WithTimeout\n\treturn \"\"\n}\n\nfunc simulateTask(ctx context.Context, duration int) error {\n\t// Your implementation here\n\t// Simulate work and check for context cancellation\n\treturn nil\n}\n\nfunc main() {\n\tvar taskDuration, timeoutDuration int\n\tfmt.Scan(&taskDuration, &timeoutDuration)\n\t\n\tresult := runTaskWithTimeout(taskDuration, timeoutDuration)\n\tfmt.Println(result)\n}",
      "solutionCode": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc runTaskWithTimeout(taskDuration, timeoutDuration int) string {\n\tctx, cancel := context.WithTimeout(context.Background(), time.Duration(timeoutDuration)*time.Second)\n\tdefer cancel()\n\t\n\terr := simulateTask(ctx, taskDuration)\n\tif err != nil {\n\t\tif err == context.DeadlineExceeded {\n\t\t\treturn \"timeout\"\n\t\t}\n\t\treturn \"error\"\n\t}\n\t\n\treturn \"completed\"\n}\n\nfunc simulateTask(ctx context.Context, duration int) error {\n\t// Simulate work by checking context periodically\n\tfor i := 0; i < duration; i++ {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tcase <-time.After(1 * time.Second):\n\t\t\t// Continue work\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc main() {\n\tvar taskDuration, timeoutDuration int\n\tfmt.Scan(&taskDuration, &timeoutDuration)\n\t\n\tresult := runTaskWithTimeout(taskDuration, timeoutDuration)\n\tfmt.Println(result)\n}",
      "hints": [
        "Use context.WithTimeout() to create timeout context",
        "Check ctx.Done() channel in your task loop",
        "Return context.DeadlineExceeded when timeout occurs",
        "Use select statement for non-blocking context checks"
      ],
      "judge0Id": 95,
      "compilerType": "judge0"
    }
  },
  "testCases": [
    {
      "id": "test-complete",
      "input": "2 5",
      "output": "completed",
      "points": 5,
      "isHidden": false,
      "timeout": 6000
    },
    {
      "id": "test-timeout",
      "input": "10 3",
      "output": "timeout",
      "points": 3,
      "isHidden": false,
      "timeout": 4000
    },
    {
      "id": "test-exact-timing",
      "input": "3 3",
      "output": "completed",
      "points": 2,
      "isHidden": true,
      "timeout": 4000
    }
  ],
  "editorial": {
    "approach": "Context package provides elegant timeout and cancellation handling. This pattern is essential for building robust concurrent applications.",
    "complexity": {
      "time": "O(n) where n is task duration",
      "space": "O(1)"
    },
    "keyPoints": [
      "context.WithTimeout for automatic cancellation",
      "Select statement for non-blocking channel operations",
      "Proper context propagation in function calls",
      "Graceful handling of timeout scenarios"
    ]
  }
}